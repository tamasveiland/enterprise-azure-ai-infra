name: "Enterprise AI Infra"
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
on:
  workflow_dispatch:

env:
  path: demos/enterprise_ai_infra         ## Path to terraform root module (Required)
  tf_version: latest                      ## Terraform version e.g: 1.1.0 Default=latest (Optional)
  az_resource_group: rg-terraform-backend ## AZ backend - AZURE Resource Group hosting terraform backend storage acc (Required)
  az_storage_acc: tfcorebackendsa6047     ## AZ backend - AZURE terraform backend storage acc (Required)
  az_container_name: tfstate              ## AZ backend - AZURE storage container hosting state files (Required)
  tf_key: foundation-dev                  ## AZ backend - Specifies name that will be given to terraform state file and plan artifact (Required)
  tf_vars_file: config-dev.tfvars         ## Terraform TFVARS (Required)
  enable_TFSEC: true                      ## (Optional)  Enable TFSEC IaC scans (Private repo requires GitHub enterprise)
  
  arm_client_id: ${{ secrets.ARM_CLIENT_ID }}             ## ARM Client ID 
  # arm_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}     ## ARM Client Secret
  arm_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }} ## ARM Subscription ID
  arm_tenant_id: ${{ secrets.ARM_TENANT_ID }}             ## ARM Tenant ID

jobs:

  tf-plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.path }}
    env:
      STORAGE_ACCOUNT: ${{ env.az_storage_acc }}
      CONTAINER_NAME: ${{ env.az_container_name }}
      RESOURCE_GROUP: ${{ env.az_resource_group }}
      TF_KEY: ${{ env.tf_key }}.tfstate
      TF_VARS: ${{ env.tf_vars_file }}
      # AZURE service principal details
      ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
      #ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.arm_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.arm_tenant_id }}
      ARM_USE_OIDC: true
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v1
        if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != ''}}
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Scan IaC - tfsec
        if: ${{ inputs.enable_TFSEC == 'true' }}
        uses: tfsec/tfsec-sarif-action@v0.1.0
        with:
          sarif_file: tfsec.sarif         

      - name: Upload SARIF file
        if: ${{ inputs.enable_TFSEC == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY" --backend-config="use_oidc=true"
        env:
          USE_OIDC: true
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan --var-file=$TF_VARS --out=plan.tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Compress TF Plan artifact
        run: zip -r ${{ inputs.tf_key }}.zip ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.tf_key }}"
          path: "${{ inputs.path }}/${{ inputs.tf_key }}.zip"
          retention-days: 5

  tf_apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.path }}
    env:
      STORAGE_ACCOUNT: ${{ env.az_storage_acc }}
      CONTAINER_NAME: ${{ env.az_container_name }}
      RESOURCE_GROUP: ${{ env.az_resource_group }}
      TF_KEY: ${{ env.tf_key }}.tfstate
      # AZURE service principal details
      ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
      #ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.arm_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.arm_tenant_id }}
  
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != ''}}
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.tf_key }}
          path: ${{ inputs.path }}

      - name: Decompress TF Plan artifact
        run: unzip ${{ inputs.tf_key }}.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY" --backend-config="use_oidc=true"

      - name: Terraform Apply
        run: terraform apply plan.tfplan
